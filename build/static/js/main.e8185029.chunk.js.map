{"version":3,"sources":["logo.svg","SlideItem.js","Slides.js","NewSlide.js","Home.js","reducer.js","config.js","initFirebase.js","App.js","store.js","index.js"],"names":["module","exports","SlideItem","id","slide","useSelector","state","firebase","data","slides","useFirebase","className","type","checked","done","onChange","update","text","name","onClick","remove","slidesQuery","path","queryParams","Slides","useFirebaseConnect","ordered","isLoaded","isEmpty","reverse","map","ind","value","key","NewSlide","useState","inputVal","changeInput","style","marginBottom","e","target","push","Home","src","logo","alt","href","rootReducer","combineReducers","firebaseInstance","apiKey","authDomain","databaseURL","storageBucket","messagingSenderId","projectId","reduxFirebase","userProfile","useFirestoreForProfile","enableLogging","window","__INITIAL_STATE__","store","initialState","history","middleware","thunk","withExtraArgument","getFirebase","compose","applyMiddleware","devToolsExtension","__REDUX_DEVTOOLS_EXTENSION__","f","createStore","createStoreWithMiddleware","configureStore","shouldUseEmulator","process","REACT_APP_USE_DB_EMULATORS","console","log","fbConfig","initializeApp","firestore","settings","host","ssl","initFirebase","ReactDOM","render","config","rfConfig","dispatch","createFirestoreInstance","document","getElementById"],"mappings":"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","file":"static/js/main.e8185029.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useSelector } from 'react-redux'\nimport { useFirebase } from 'react-redux-firebase'\nimport './Slide.css'\n\nfunction SlideItem({ id }) {\n  const slide = useSelector(state => state.firebase.data.slides[id])\n  const firebase = useFirebase()\n\n  function toggleDone() {\n    firebase.update(`slides/${id}`, { done: !slide.done })\n  }\n  function deleteSlide() {\n    return firebase.remove(`slides/${id}`)\n  }\n\n  return (\n    <li className=\"Slide\">\n      <input\n        className=\"Slide-Input\"\n        type=\"checkbox\"\n        checked={slide.done}\n        onChange={toggleDone}\n      />\n      {slide.text || slide.name}\n      <button className=\"Slide-Button\" onClick={deleteSlide}>\n        Delete\n      </button>\n    </li>\n  )\n}\n\nSlideItem.propTypes = {\n  id: PropTypes.string.isRequired\n}\n\nexport default SlideItem\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { useFirebaseConnect, isLoaded, isEmpty } from 'react-redux-firebase'\nimport SlideItem from './SlideItem'\n\nconst slidesQuery =  {\n  path: 'slides',\n  queryParams: ['limitToLast=10']\n}\n\nfunction Slides() {\n  // Attach todos listener\n  useFirebaseConnect(() => [\n    slidesQuery\n  ])\n\n  // Get todos from redux state\n  const slides = useSelector(state => state.firebase.ordered.slides)\n\n  // Show a message while todos are loading\n  if (!isLoaded(slides)) {\n    return 'Loading'\n  }\n\n  // Show a message if there are no todos\n  if (isEmpty(slides)) {\n    return 'Slide list is empty'\n  }\n\n  return slides.reverse().map(({ value: slide, key }, ind) => (\n    <SlideItem\n      key={`${key}-${ind}`}\n      id={key}\n      {...slide}\n    />\n  ))\n}\n\nexport default Slides\n","import React, { useState } from 'react'\nimport { useFirebase } from 'react-redux-firebase'\n\nfunction NewSlide() {\n  const [inputVal, changeInput] = useState('')\n  const firebase = useFirebase()\n\n  function resetInput() {\n    changeInput('')\n  }\n\n  function onInputChange(e) {\n    return changeInput(e && e.target && e.target.value)\n  }\n\n  function addSlide() {\n    return firebase.push('slides', { text: inputVal || 'sample', done: false })\n  }\n\n  return (\n    <div style={{ marginBottom: '4rem' }}>\n      <h4>New Slide</h4>\n      <input value={inputVal} onChange={onInputChange} />\n      <button onClick={addSlide}>Add</button>\n      <button onClick={resetInput}>Cancel</button>\n    </div>\n  )\n}\n\nexport default NewSlide\n","import React from 'react'\nimport Slides from './Slides'\nimport NewSlide from './NewSlide'\nimport logo from './logo.svg'\nimport './App.css'\n\nfunction Home() {\n  return (\n    <div className='App'>\n      <div className='App-header'>\n        <h2>Tumor Board Viz</h2>\n        <img src={logo} className='App-logo' alt='logo' />\n      </div>\n      <div className='App-todos'>\n        <h4>\n          Loaded From\n          <span className='App-Url'>\n            <a href='https://redux-firebasev3.firebaseio.com/'>\n              Tumor Board\n            </a>\n          </span>\n        </h4>\n\n        <h4>Slides List</h4>\n        <Slides />\n        <NewSlide />\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n","import { combineReducers } from 'redux'\nimport { reducer as firebase } from 'react-redux-firebase'\n// import { reducer as firestore } from 'react-redux-firebase'\n\nconst rootReducer = combineReducers({\n  firebase,\n  // firestore // add this for firestore\n})\n\nexport default rootReducer\n","export const firebase = {\n  apiKey: 'AIzaSyCdEkLifJZqPCcsq_etqpyXBwsAoAJNWu4',\n  authDomain: 'ai-r-ec193.firebaseapp.com',\n  databaseURL: 'https://ai-r-ec193.firebaseio.com',\n  storageBucket: 'ai-r-ec193.appspot.com',\n  messagingSenderId: 'ai-r-ec193.appspot.com',\n  projectId: 'ai-r-ec193'\n}\n\nexport const reduxFirebase = {\n  userProfile: 'users',\n  useFirestoreForProfile: true,\n  enableLogging: false\n}\n\nexport default { firebase, reduxFirebase }\n","import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/database'\nimport 'firebase/firestore' // make sure you add this for firestore\nimport { firebase as fbConfig } from './config'\n\nlet firebaseInstance\n\nexport default function initFirebase(initialState, history) {\n  if (firebaseInstance) {\n    return firebaseInstance\n  }\n\n  // Initialize firebase instance if it doesn't already exist\n  if (!firebaseInstance) {\n    const shouldUseEmulator = process.env.REACT_APP_USE_DB_EMULATORS\n\n    if (shouldUseEmulator) { // or window.location.hostname === 'localhost' if you want\n      console.log('Using RTDB emulator')\n      fbConfig.databaseURL = `http://localhost:9000?ns=${fbConfig.projectId}`\n    }\n\n    // Initialize Firebase instance\n    firebase.initializeApp(fbConfig)\n\n    if (shouldUseEmulator) { // or window.location.hostname === 'localhost' if you want\n      console.log('Using Firestore emulator')\n      firebase.firestore().settings({\n        host: 'localhost:8080',\n        ssl: false\n      })\n    }\n    firebaseInstance = firebase\n  }\n\n\n  return firebaseInstance\n}\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/database'\nimport 'firebase/firestore' // make sure you add this for firestore\nimport { ReactReduxFirebaseProvider } from 'react-redux-firebase';\nimport { createFirestoreInstance } from 'redux-firestore';\nimport Home from './Home'\nimport configureStore from './store'\nimport initFirebase from './initFirebase'\nimport { reduxFirebase as rfConfig } from './config'\nimport './App.css'\n\nconst initialState = window && window.__INITIAL_STATE__ // set initial state here\nconst store = configureStore(initialState)\n// Initialize Firebase instance\ninitFirebase()\n\nexport default function App () {\n  return (\n    <Provider store={store}>\n      <ReactReduxFirebaseProvider\n        firebase={firebase}\n        config={rfConfig}\n        dispatch={store.dispatch}\n        createFirestoreInstance={createFirestoreInstance}>\n        <Home />\n      </ReactReduxFirebaseProvider>\n    </Provider>\n  )\n}\n","import { applyMiddleware, createStore, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducer'\nimport { getFirebase } from 'react-redux-firebase'\n\nexport default function configureStore (initialState, history) {\n  const middleware = [\n    thunk.withExtraArgument({ getFirebase })\n  ]\n  const createStoreWithMiddleware = compose(\n    applyMiddleware(...middleware),\n    typeof window === 'object' && typeof window.devToolsExtension !== 'undefined' ? () => window.__REDUX_DEVTOOLS_EXTENSION__ : f => f\n  )(createStore)\n\n  const store = createStoreWithMiddleware(rootReducer)\n\n  if (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept('./reducer', () => {\n      const nextRootReducer = require('./reducer')\n      store.replaceReducer(nextRootReducer)\n    })\n  }\n\n  return store\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}